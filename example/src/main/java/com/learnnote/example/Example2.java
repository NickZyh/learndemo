package com.learnnote.example;


/**
 * @Author nick.zhou
 * @Date 2019/7/24 10:13
 * @Description <p>TODO</p>
 **/
public class Example2 {

    public static void main(String[] args) {
        /**
         * 十进制整数转成二进制数：辗转相除法
         * 十进制小数转成二进制数：小数部分将小数乘以2,取整数部分作为二进制值，然后再将小数乘以2，再取整数部分，直到小数位等于0为止
         * 计算出错的原因：当小数转成10进制时,由于只保留23位的实数位,这样就会导致小数转成2进制时时多余的位数被截断,从而导致精度缺失;
         * 精度缺失的时机：计算机只认识0和1，所有类型的计算首先会转化为二进制的计算;
         * 结论：只要不出现加减乘除等实际计算之外,其余的类似于赋值等操作,不会导致精度丢失
         */

        float f1 = 6.6F;
        float f2 = 1.3F;
        // exp:7.9F  get:7.8999996
        System.out.println(f1 + f2);

        double d1 = 80.3;
        double d2 = 80.1;
        System.out.println(d1);
        System.out.println(d2);
        System.out.println(d1 + d2);

        /**
         * http://www.blogjava.net/jelver/articles/340038.html
         * float内存存储结构为4bytes = 32bits,即32位,32位的分配如下
         *      0~22位(23位)：有效数位
         *      23~29位(7位)：指数位
         *      30位(1位)：   指数符号位
         *      31位(1位)     实数符号位
         *      其中符号位1表示正，0表示负。代表数字的位数总和为24位(有效数位 + 实数符号位)，其中一位是实数符号位。
         *
         * 将一个float型转化为内存存储格式的步骤为：
     *      （1）先将这个实数的绝对值化为二进制格式，注意实数的整数部分和小数部分的二进制方法在上面已经探讨过了。
     *      （2）将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有效数字的右边。
     *      （3）从小数点右边第一位开始数出二十三位数字放入第22到第0位。
     *      （4）如果实数是正的，则在第31位放入“0”，否则放入“1”。
     *      （5）如果n 是左移得到的，说明指数是正的，第30位放入“1”。如果n是右移得到的或n=0，则第30位放入“0”。
     *      （6）如果n是左移得到的，则将n减去1后化为二进制，并在左边加“0”补足七位，放入第29到第23位。如果n是右移得到的或n=0，则将n化为二进制后在左边加“0”补足七位，再各位求反，再放入第29到第23位。
     *           举例说明： 11.9的内存存储格式
     *       (1) 将11.9化为二进制后大约是" 1011. 1110011001100110011001100..."。
     *       (2) 将小数点左移三位到第一个有效位右侧： "1. 011 11100110011001100110 "。 保证有效位数24位，右侧多余的截取（误差在这里产生了 ）。
     *       (3) 这已经有了二十四位有效数字，将最左边一位“1”去掉，得到“ 011 11100110011001100110 ”共23bit。将它放入float存储结构的第22到第0位。
     *       (4) 因为11.9是正数，因此在第31位实数符号位放入“0”。
     *       (5) 由于我们把小数点左移，因此在第30位指数符号位放入“1”。
     *       (6) 因为我们是把小数点左移3位，因此将3减去1得2，化为二进制，并补足7位得到0000010，放入第29到第23位。
     *           最后表示11.9为： 0 1 0000010 011 11100110011001100110
         *
         * 将一个内存存储的float二进制格式转化为十进制的步骤：
     *      （1）将0~22位的二进制数取出,在最左边(高位)补一位“1”，得到24(23+1)位有效数字。将小数点放置在最左边那个“1”的右边。
     *      （2）取出23~29位的二进制数。当30位是“0”时将二进制数各位求反。当30位是“1”时将二进制数加1。
     *      （3）将小数点左移n位（当30位是“0”时）或右移n位（当30位是“1”时），得到一个二进制表示的实数。
     *      （4）将这个二进制实数化为十进制，并根据第31位是“0”还是“1”加上正号或负号即可。
         */
    }

    public void test() {

    }
}




